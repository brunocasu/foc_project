void* MessageApp_channel_0(void *vargp)
{
    char client_msg[MAX_BUFF];
    int client_msg_len;
    int outlen = 0;
    char rec_cmd[4] = {0};
    char data[MAX_BUFF];
    int channel = 0;
    char msg_to_send[MAX_BUFF];
    int friend_channel;
    int user_pubkey_len;
    char user_pubkey[2048];
    int in_chat_flag = 0;
    char *cmd_chat ="chat";
    char *cmd_reqt ="reqt";
    char *cmd_pubk ="pubk";
    char *cmd_acpt ="acpt";
    char *cmd_refu ="refu";
    char *cmd_frwd = "frwd";
    char *cmd_list = "list";
    char *cmd_exit ="exit";
    
    pthread_mutex_lock(&mutex_channel[0]);    
    printf("Channel (%d) Connected (Non-Secure)\nBegin Handshake...\n", channel);
    
    // begin HANDSHAKE protocol - it returns the session key, the iv, and will set the username and username_len for this channel
    if (MessageApp_handshake(channel) !=1) // key is 32 bytes long - iv is 12 bytes long
    {
        printf("Handshake FAILED\n");
        close(usr_data[channel].connfd);
        for(;;); // close channel
    }
    else
        printf("Handshake SUCCESS Channel (%d) Connected (Secure) User: <%s>\n", channel, usr_data[channel].username);
    
    usr_data[channel].pending = 0; // start with no pendencies
    
    // infinite loop for chat
    for (;;)
    {
        /** Receive messages from logged Users */
        client_msg_len = channel_secure_receive(channel, usr_data[channel].iv, usr_data[channel].key, client_msg); // client_msg is tainted!
        printf("SERVER Received plaintext (%d): %s\n",client_msg_len ,client_msg);
        if (client_msg_len > 4){
            for (int i=0;i<4;i++){rec_cmd[i]=client_msg[i];} // Save received COMMAND
            for (int i=0;i<client_msg_len-4;i++){data[i]=client_msg[i+4];} // Save received DATA
            
            /** process Command from client */
            if ((strncmp("chat", rec_cmd, 4) == 0)&&(in_chat_flag == 0)&&(usr_data[friend_channel].pending == 0)){ // Request to chat with another user
                if((client_msg_len-4)<16){
                    friend_channel = 0;
                    for(int n=0;n<MAX_CHANNELS;n++){ // search the friend username on the channels
                        if (strncmp(data, usr_data[friend_channel].username, usr_data[friend_channel].username_len) == 0){ // found matching username fomr database
                            //msg_to_send = malloc(4+usr_data[channel].username_len);
                            for(int i=0;i<4;i++){msg_to_send[i] = cmd_reqt[i];}
                            for(int i=0;i<usr_data[channel].username_len;i++){msg_to_send[i+4] = usr_data[channel].username[i];}
                            printf("received chat Send Ch (%d) TO Ch (%d) - (%d): %s\n", channel, friend_channel, 4+usr_data[channel].username_len, msg_to_send);
                            channel_secure_send(friend_channel, usr_data[friend_channel].iv, usr_data[friend_channel].key, msg_to_send, 4+usr_data[channel].username_len);
                            //write(usr_data[channel].connfd, msg_to_send, 4+usr_data[channel].username_len);
                            usr_data[friend_channel].pending = 1;
                            break;} 
                        else {
                            friend_channel++;}
                    }
                    if (friend_channel==MAX_CHANNELS){channel_secure_send(channel, usr_data[channel].iv, usr_data[channel].key, "erroUsername not found", 22);}
                }
                else {channel_secure_send(channel, usr_data[channel].iv, usr_data[channel].key, "erroUsername incorrect", 22);}
            }
            else if ((strncmp("acpt", rec_cmd, 4) == 0)&&(usr_data[channel].pending == 1)){ // User accepted connexion from friend - send each other public keys
                in_chat_flag = 1;
                if((client_msg_len-4)<16){
                    friend_channel = 0;
                    for(int n=0;n<MAX_CHANNELS;n++){ // search the friend username on the channels
                        if (strncmp(data, usr_data[friend_channel].username, usr_data[friend_channel].username_len) == 0){ // found matching username fomr database
                            user_pubkey_len = get_user_pubkey_text(usr_data[channel].username, usr_data[channel].username_len, user_pubkey);                            
                            for(int i=0;i<4;i++){msg_to_send[i] = cmd_pubk[i];}
                            for(int i=0;i<user_pubkey_len;i++){msg_to_send[i+4] = user_pubkey[i];}
                            channel_secure_send(friend_channel, usr_data[friend_channel].iv, usr_data[friend_channel].key, msg_to_send, 4+user_pubkey_len); // found 
                            printf("received acpt Send Ch (%d) TO Ch (%d) - (%d):\n", channel, friend_channel, 4+usr_data[channel].username_len);
                            // send each other the pubkey
                            user_pubkey_len = get_user_pubkey_text(usr_data[friend_channel].username, usr_data[friend_channel].username_len, user_pubkey);                            
                            for(int i=0;i<user_pubkey_len;i++){msg_to_send[i+4] = user_pubkey[i];}
                            channel_secure_send(channel, usr_data[channel].iv, usr_data[channel].key, msg_to_send, 4+user_pubkey_len);
                            printf("received acpt Send Ch (%d) TO Ch (%d) - (%d):\n", channel, friend_channel, 4+usr_data[channel].username_len);
                            break;} 
                        else {friend_channel++;}
                    }
                    printf("friend channel %d\n", friend_channel);
                    usr_data[channel].pending = 2; // conected
                    usr_data[friend_channel].pending = 2; // conected
                    //if (friend_channel==MAX_CHANNELS){channel_secure_send(channel, usr_data[channel].iv, usr_data[channel].key, "erroUsername not found", 22);}
                }
                else {channel_secure_send(channel, usr_data[channel].iv, usr_data[channel].key, "erroUsername incorrect", 22);}                    
            }
            else if ((strncmp("refu", rec_cmd, 4) == 0)&&(usr_data[channel].pending == 1)){
                usr_data[channel].pending = 0;
                for(int i=0;i<4;i++){msg_to_send[i] = cmd_refu[i];}
                for(int i=0;i<client_msg_len-4;i++){msg_to_send[i+4] = data[i];}
                channel_secure_send(friend_channel, usr_data[friend_channel].iv, usr_data[friend_channel].key, msg_to_send, client_msg_len);
            }
            else if ((strncmp("frwd", rec_cmd, 4) == 0)&&(usr_data[channel].pending == 2)){
                for(int i=0;i<4;i++){msg_to_send[i] = cmd_frwd[i];}
                for(int i=0;i<client_msg_len-4;i++){msg_to_send[i+4] = data[i];}
                channel_secure_send(friend_channel, usr_data[friend_channel].iv, usr_data[friend_channel].key, msg_to_send, client_msg_len);
                printf("received frwd Send Ch (%d) TO Ch (%d) - (%d)\n", channel, friend_channel, 4+usr_data[channel].username_len);
                
            }
            else if (strncmp("list", rec_cmd, 4) == 0){
                for(int i=0;i<4;i++){msg_to_send[i] = cmd_list[i];}
                outlen = 4;
                for(int n=0;n<MAX_CHANNELS;n++){
                    if(usr_data[n].username!=NULL){
                        for(int i=0;i<usr_data[n].username_len;i++){
                            msg_to_send[outlen]=usr_data[n].username[i];
                            outlen++;
                        }
                        msg_to_send[outlen]='\n';
                        outlen++;
                    }
                }
                channel_secure_send(channel, usr_data[channel].iv, usr_data[channel].key, msg_to_send, outlen+1);
                printf("received list Send Ch (%d) TO Ch (%d) - (%d)\n", channel, friend_channel, 4+usr_data[channel].username_len);
            }  
            else if (strncmp("exit", rec_cmd, 4) == 0){
                close (usr_data[channel].connfd); break;                 
            }        
        }
        else if (client_msg_len>0){printf("Received msg Error (%d)\n",client_msg_len);}
        else {close (usr_data[channel].connfd); break;}
    }
    // close(server_sockfd);
    for(;;); //close channel
}
